--1. launch example 1
ros2 pkg create turtle_pkg --build-type ament_python --dependencies turtlesim
cd turtle_pkg/
mkdir launch
cd launch/
touch turtle.launch.py
chmod +x turtle.launch.py

cd ../../..
colcon build --packages-select turtle_pkg --symlink-install
source install/setup.bash

실행1 : ros2 launch turtle_pkg turtle.launch.py

--- turtle.launch.py ---
from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    ld = LaunchDescription()

    turtlesim_node = Node(
        package="turtlesim",
        executable="turtlesim_node",
        remappings=[
            ("turtle1/cmd_vel", "hocar/cmd_vel")
        ]
    )

    draw_square_node = Node(
        package="turtlesim",
        executable="draw_square",
        remappings=[
            ("turtle1/cmd_vel", "hocar/cmd_vel")
        ]
    )

    ld.add_action(turtlesim_node)
    ld.add_action(draw_square_node)
    return ld

--- setup.py ---
from setuptools import setup
import os
from glob import glob

package_name = 'turtle_pkg'

setup(
    name=package_name,
    version='0.0.0',
    packages=[package_name],
    data_files=[
        ('share/ament_index/resource_index/packages',
            ['resource/' + package_name]),
        ('share/' + package_name, ['package.xml']),
        (os.path.join('share', package_name), glob('launch/*.launch.py'))
    ],
    install_requires=['setuptools'],
    zip_safe=True,
    maintainer='ros2',
    maintainer_email='ros2@todo.todo',
    description='TODO: Package description',
    license='TODO: License declaration',
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
        ],
    },
)


--2. launch example 2
cd ~/ros2_ws/src/turtle_pkg/launch/
touch turtlesim_mimic.launch.py
chmod +x turtlesim_mimic.launch.py

cd ../../..
colcon build --packages-select turtle_pkg --symlink-install
source install/setup.bash

실행1 : ros2 launch turtle_pkg turtle_mimic.launch.py
실행2 : ros2 run turtlesim turtle_teleop_key --ros-args -r turtle1/cmd_vel:=turtlesim1/turtle1/cmd_vel
실행3 : ros2 topic pub -r 1 /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}"

--- turtlesim_mimic.launch.py ---
from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='turtlesim',
            namespace='turtlesim1',
            executable='turtlesim_node',
            name='sim'
        ),
        Node(
            package='turtlesim',
            namespace='turtlesim2',
            executable='turtlesim_node',
            name='sim'
        ),
        Node(
            package='turtlesim',
            executable='mimic',
            name='mimic',
            remappings=[
                ('/input/pose', '/turtlesim1/turtle1/pose'),
                ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel'),
            ]
        )
    ])

